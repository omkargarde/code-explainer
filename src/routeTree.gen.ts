/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UploadRouteImport } from './routes/upload'
import { Route as CodeRouteImport } from './routes/code'
import { Route as IndexRouteImport } from './routes/index'
import { Route as GenerateQuestionsRouteImport } from './routes/generate/questions'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth/$'

const UploadRoute = UploadRouteImport.update({
  id: '/upload',
  path: '/upload',
  getParentRoute: () => rootRouteImport,
} as any)
const CodeRoute = CodeRouteImport.update({
  id: '/code',
  path: '/code',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const GenerateQuestionsRoute = GenerateQuestionsRouteImport.update({
  id: '/generate/questions',
  path: '/generate/questions',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/code': typeof CodeRoute
  '/upload': typeof UploadRoute
  '/generate/questions': typeof GenerateQuestionsRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/code': typeof CodeRoute
  '/upload': typeof UploadRoute
  '/generate/questions': typeof GenerateQuestionsRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/code': typeof CodeRoute
  '/upload': typeof UploadRoute
  '/generate/questions': typeof GenerateQuestionsRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/code' | '/upload' | '/generate/questions' | '/api/auth/$'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/code' | '/upload' | '/generate/questions' | '/api/auth/$'
  id:
    | '__root__'
    | '/'
    | '/code'
    | '/upload'
    | '/generate/questions'
    | '/api/auth/$'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CodeRoute: typeof CodeRoute
  UploadRoute: typeof UploadRoute
  GenerateQuestionsRoute: typeof GenerateQuestionsRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/upload': {
      id: '/upload'
      path: '/upload'
      fullPath: '/upload'
      preLoaderRoute: typeof UploadRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/code': {
      id: '/code'
      path: '/code'
      fullPath: '/code'
      preLoaderRoute: typeof CodeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/generate/questions': {
      id: '/generate/questions'
      path: '/generate/questions'
      fullPath: '/generate/questions'
      preLoaderRoute: typeof GenerateQuestionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CodeRoute: CodeRoute,
  UploadRoute: UploadRoute,
  GenerateQuestionsRoute: GenerateQuestionsRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
